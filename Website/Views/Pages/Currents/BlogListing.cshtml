@using XBlogHelper.Models.Blog
@using XBlogHelper.Search
@using XBlogHelper.General
@using Sitecore.Data.Items
@using Sitecore.Mvc
@using Sitecore.Links
@using Sitecore.Resources.Media
@inherits System.Web.Mvc.WebViewPage


@{
    Item dataSourceItem = Sitecore.Context.Database.GetItem(Sitecore.Mvc.Presentation.RenderingContext.Current.Rendering.DataSource);
    BlogSettings settingsItem = XBlogHelper.General.DataManager.GetBlogSettingsItem(dataSourceItem != null ? dataSourceItem : Sitecore.Context.Item);
    string searchHeading = "";
    string categoryID = "";
    string authorID = "";
    string tagID = "";
    string searchText = "";

    string urlCategoryName = DataManager.GetUrlValByPattern(Request.Url.PathAndQuery, XBSettings.XBCategoryUrlPattern);
    if (!String.IsNullOrEmpty(urlCategoryName))
    {
        Category categoryItem = CategoryManager.GetCategoryByName(Sitecore.Context.Item, urlCategoryName);
        if (categoryItem != null)
        {
            categoryID = categoryItem.InnerItem.ID.ToString();

            if (settingsItem.DisplayFilterMessage)
            {
                searchHeading = settingsItem.CategoryFilterTitle + categoryItem.CategoryName;
            }
        }
    }

    string urlAuthorName = DataManager.GetUrlValByPattern(Request.Url.PathAndQuery, XBSettings.XBAuthorUrlPattern);
    if (!String.IsNullOrEmpty(urlAuthorName))
    {
        Author authorItem = AuthorManager.GetAuthorByName(Sitecore.Context.Item, urlAuthorName);
        if (authorItem != null)
        {
            authorID = authorItem.InnerItem.ID.ToString();

            if (settingsItem.DisplayFilterMessage)
            {
                searchHeading = settingsItem.AuthorFilterTitle + authorItem.FullName;
            }
        }
    }

    string urlTagName = DataManager.GetUrlValByPattern(Request.Url.PathAndQuery, XBSettings.XBTagsUrlPattern);
    if (!String.IsNullOrEmpty(urlTagName))
    {
        Tag tagItem = TagManager.GetTagByName(Sitecore.Context.Item, urlTagName);
        if (tagItem != null)
        {
            tagID = tagItem.InnerItem.ID.ToString();

            if (settingsItem.DisplayFilterMessage)
            {
                searchHeading = settingsItem.TagFilterTitle + tagItem.TagName;
            }
        }
    }


    string urlSearchName = DataManager.GetUrlValByPattern(Request.Url.PathAndQuery, XBSettings.XBSearchURLPattern);
    if (!String.IsNullOrEmpty(urlSearchName))
    {
        if (!String.IsNullOrEmpty(urlSearchName))
        {
            searchText = urlSearchName;

            if (settingsItem.DisplayFilterMessage)
            {
                searchHeading = settingsItem.SearchFilterTitle + searchText;
            }
        }
    }
    
    
    //Get search results
    int currentPage = 1;
    int maximumRows = 5;
    int startRowIndex = 1;
    bool rowResult = Int32.TryParse(settingsItem.PageSize, out maximumRows);
    if (!rowResult)
    {
        maximumRows = 5;   
    }

    bool pageResult = false;
        
    if (!String.IsNullOrEmpty(Request.QueryString[XBSettings.XBPageQS]))
    {
        pageResult = Int32.TryParse(Request.QueryString[XBSettings.XBPageQS], out currentPage);
    }
    if (!pageResult)
    {
        currentPage = 1;   
    }

    startRowIndex = (currentPage - 1) * maximumRows;
        
        
    IEnumerable<BlogPost> blogs = BlogManager.GetBlogPosts(Sitecore.Context.Item, categoryID, authorID, tagID, searchText, startRowIndex, maximumRows);
    int totalRows = BlogManager.GetBlogsCount(Sitecore.Context.Item, categoryID, authorID, tagID, searchText);
    
    if (searchHeading != "")
    {
        searchHeading = totalRows.ToString() + " " + searchHeading;   
    }
    
}


<div class="currents__blocks">
    @{
        if (blogs == null || !blogs.Any())
        {
            @Html.Raw("Sorry no matching results were found.");
        }
        else
        {

            <div class="currents-grid">
                <div class="grid-sizer"></div>
                <div class="gutter-sizer"></div>

                @foreach (var blogPost in blogs.Select((blog,i) => new {i, blog}))
                {
                    <div class="grid-item 
                         @blogPost.blog.Categories.FirstOrDefault().Name.ToLower() 
                         @(@blogPost.i == 0 || @blogPost.i == 8 ? "grid-item--width4" : "") 
                         @(@blogPost.i == 3 || @blogPost.i == 9 ? "grid-item--width2 grid-item--height2" : "")  
                         @(@blogPost.i == 6 || @blogPost.i == 15 ? "grid-item--width3" : "")"
                         style="@Html.AsBackgroundStyle("Small Square", blogPost.blog.InnerItem)"
                         >
                        <div class="headline">
                            @Html.Raw(blogPost.blog.PublishDate.DateTime.ToString(settingsItem.BlogListingDateFormat))
                            <h2><a href="@Html.Raw(LinkManager.GetItemUrl(blogPost.blog.InnerItem))">@Html.Raw(blogPost.blog.Title)</a></h2>
                        </div>
                        <p>
                            @if (!String.IsNullOrEmpty(blogPost.blog.Summary))
                            {
                                @Html.Raw(blogPost.blog.Summary);
                            }
                            else
                            {
                                @Html.Raw(XBlogHelper.Helpers.Helper.SafeSubstring(blogPost.blog.Summary, settingsItem.DisplaySummaryLength));
                            }
                        </p>
                    </div>
                }
            </div>
        }
    }


</div>

<script>
    $(document).ready(function () {

        $('.currents-grid').isotope({
            itemSelector: '.grid-item',
            percentPosition: true,
            masonry: {
                columnWidth: '.grid-sizer',
                gutter: '.gutter-sizer'
            }
        });

    });

</script>