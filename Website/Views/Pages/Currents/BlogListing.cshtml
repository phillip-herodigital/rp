@using XBlogHelper.Models.Blog
@using XBlogHelper.Search
@using XBlogHelper.General
@using Sitecore.Data.Items
@using Sitecore.Data.Fields
@using Sitecore.Mvc
@using Sitecore.Links
@using Sitecore.Resources.Media
@using Sitecore.Resources
@using StreamEnergy.MyStream.Controllers.ApiControllers
@inherits System.Web.Mvc.WebViewPage


@{
    Item dataSourceItem = Sitecore.Context.Database.GetItem(Sitecore.Mvc.Presentation.RenderingContext.Current.Rendering.DataSource);
    BlogSettings settingsItem = XBlogHelper.General.DataManager.GetBlogSettingsItem(dataSourceItem != null ? dataSourceItem : Sitecore.Context.Item);
    string searchHeading = "";
    string categoryID = "";
    string authorID = "";
    string tagID = "";
    string searchText = "";
    string category = "";

    string urlCategoryName = DataManager.GetUrlValByPattern(Request.Url.PathAndQuery, XBSettings.XBCategoryUrlPattern);

    if (Sitecore.Context.Item.TemplateName == "Blog Category")
    {
        categoryID = Sitecore.Context.Item.Fields["Category"].Value.ToString();
        category = Sitecore.Context.Database.GetItem(categoryID).Name.ToLower();
        
    }

    string urlTagName = DataManager.GetUrlValByPattern(Request.Url.PathAndQuery, XBSettings.XBTagsUrlPattern);
    if (!String.IsNullOrEmpty(urlTagName))
    {
        Tag tagItem = TagManager.GetTagByName(Sitecore.Context.Item, urlTagName);
        if (tagItem != null)
        {
            tagID = tagItem.InnerItem.ID.ToString();

            if (settingsItem.DisplayFilterMessage)
            {
                searchHeading = settingsItem.TagFilterTitle + tagItem.TagName;
            }
        }
    }


    string urlSearchName = DataManager.GetUrlValByPattern(Request.Url.PathAndQuery, XBSettings.XBSearchURLPattern);
    if (!String.IsNullOrEmpty(urlSearchName))
    {
        if (!String.IsNullOrEmpty(urlSearchName))
        {
            searchText = urlSearchName;

            if (settingsItem.DisplayFilterMessage)
            {
                searchHeading = settingsItem.SearchFilterTitle + searchText;
            }
        }
    }
    
    //Get search results
    int currentPage = 1;
    int maximumRows = 16;
    int startRowIndex = 1;

    bool pageResult = false;
        
    if (!String.IsNullOrEmpty(Request.QueryString[XBSettings.XBPageQS]))
    {
        pageResult = Int32.TryParse(Request.QueryString[XBSettings.XBPageQS], out currentPage);
    }
    if (!pageResult)
    {
        currentPage = 1;   
    }
    startRowIndex = (currentPage - 1) * maximumRows;
    IEnumerable<BlogPost> blogs = CurrentsController.GetCurrentsPosts(Sitecore.Context.Item, categoryID, authorID, tagID, searchText, startRowIndex, maximumRows, Sitecore.Context.Language.ToString());
    int totalRows = blogs == null ? 0 : blogs.Count();
    
}


<div class="currents__blocks" ng-controller="CurrentsCtrl" ng-init="currentItem = '@Sitecore.Context.Item.ID.ToString()';language = '@Sitecore.Context.Language.ToString()'">
    @{
        if (blogs == null || !blogs.Any())
        {
            @Html.Raw("Sorry no matching results were found.");
        }
        else
        {

            <div class="currents-grid clearfix">
                <div class="grid-sizer"></div>
                <div class="gutter-sizer"></div>

                @foreach (var blogPost in blogs.Select((blog, i) => new { i, blog }))
                {
                    <div class="grid-item 
                         @blogPost.blog.Categories.FirstOrDefault().Name.ToLower() 
                         @(@blogPost.i == 0 || @blogPost.i == 8 ? "grid-item--width4" : "") 
                         @(@blogPost.i == 3 || @blogPost.i == 9 ? "grid-item--width2 grid-item--height2" : "")  
                         @(@blogPost.i == 6 || @blogPost.i == 15 ? "grid-item--width3" : "")"
                         style="@Html.AsBackgroundStyle("Small Square", blogPost.blog.InnerItem)
                         @(@blogPost.i == 0 || @blogPost.i == 8 ? @Html.AsBackgroundStyle("Large Rectangle", blogPost.blog.InnerItem) : "") 
                         @(@blogPost.i == 3 || @blogPost.i == 9 ? @Html.AsBackgroundStyle("Large Square", blogPost.blog.InnerItem) : "")  
                         @(@blogPost.i == 6 || @blogPost.i == 15 ? @Html.AsBackgroundStyle("Medium Rectangle", blogPost.blog.InnerItem) : "")"
                         >
                        @if (!string.IsNullOrEmpty(@blogPost.blog.InnerItem.Fields["YouTube ID"].Value)) 
                        {
                            <div class="article-video"></div>
                        }
                        <div class="article-overview">
                            <span class="article-date">@Html.Raw(blogPost.blog.PublishDate.DateTime.ToString(settingsItem.BlogListingDateFormat))</span>
                            <h2><a href="@Html.Raw(LinkManager.GetItemUrl(blogPost.blog.InnerItem))">@Html.Raw(blogPost.blog.Title)</a></h2>
                            <div class="article-summary">
                                @if (!String.IsNullOrEmpty(blogPost.blog.Summary))
                                {
                                    @Html.Raw(blogPost.blog.Summary);
                                }
                                else
                                {
                                    @Html.Raw(XBlogHelper.Helpers.Helper.SafeSubstring(blogPost.blog.Summary, settingsItem.DisplaySummaryLength));
                                }
                            </div>
                        </div>
                        
                    </div>
                }
            </div>
        }
    }

    <div class="load-more @category">
        <a href="#" ng-click="loadMore()">@Html.Sitecore().Field("Load More Text", dataSourceItem) <i class="icon-load-more"></i></a>
        @Html.Raw(BlogManager.GetBlogPagination(settingsItem, currentPage, totalRows, maximumRows))
    </div>

</div>