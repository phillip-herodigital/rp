// Usage @include breakpoint(small) { /* Styles here */ }
@mixin breakpoint($point) {
	@if $point == large {
		@media only screen and (min-width : $breakpoint-medium + 1) { @content; }
	}
	@else if $point == medium-large {
		@media only screen and (min-width: $breakpoint-small + 1) { @content; }
	}
	@else if $point == medium {
		@media only screen and (min-width: $breakpoint-small + 1) and (max-width: $breakpoint-medium) { @content; }
	}
	@else if $point == small-medium {
		@media only screen and (max-width: $breakpoint-medium) { @content; }
	}
	@else if $point == small {
		@media only screen and (max-width: $breakpoint-small) { @content; }
	}
}

@mixin breakpoint-max($width) {
	@media only screen and (max-width: $width) { @content; }
}

@mixin breakpoint-min($width) {
	@media only screen and (max-width: $width) { @content; }
}

@mixin breakpoint-min-max($minWidth, $maxWidth) {
	@media only screen and (min-width: $minWidth) and (max-width: $maxWidth) { @content; }
}

@mixin image-replace($imgName, $retinaImgName: false) {
	display: inline-block;
	width: image-width($imgName);
	height: image-height($imgName);
	background-image: image-url($imgName);
	background-repeat: no-repeat;
	text-indent: -5000px;
    @if $retinaImgName {
        @media (-webkit-min-device-pixel-ratio: 2), (-o-min-device-pixel-ratio: 3/2), (min--moz-device-pixel-ratio: 2), (min-device-pixel-ratio: 2), (min-resolution: 144dpi), (min-resolution: 2dppx) {
            background-image: image-url($retinaImgName);
			background-size: (image-width($retinaImgName) / 2) ceil(image-height($retinaImgName) / 2);
        }
    }
}

@mixin retina-background($imgName, $path: 'bg') {
	background-image: image-url("#{$path}/#{$imgName}");

	@if image-exists("#{$path}2x/#{$imgName}") {
		@media (-webkit-min-device-pixel-ratio: 2), (-o-min-device-pixel-ratio: 3/2), (min--moz-device-pixel-ratio: 2), (min-device-pixel-ratio: 2), (min-resolution: 144dpi), (min-resolution: 2dppx) {
			background-image: image-url("#{$path}2x/#{$imgName}");
			background-size: (image-width("#{$path}2x/#{$imgName}") / 2) ceil(image-height("#{$path}2x/#{$imgName}") / 2);
		}
	}
}

@mixin layout-list {
	@include no-bullet;
	margin: 0;
	padding: 0;
}


/**
 * Backwards compatitbility for IE8 opacity
 */
@mixin background-opacity($color, $opacity) {
	background: image-url("../i/{$color}-alpha-{$opacity}.png") repeat;
	background: rgba($color, $opacity / 100);
}