@using System.Linq

@using Sitecore
@using Sitecore.Globalization
@using Sitecore.Modules.EmailCampaign.Messages
@using Sitecore.Mvc
@using Sitecore.Mvc.Presentation
@using Sitecore.Web
@using Sitecore.Web.UI.Controls.Common.UserControls

@model RenderingModel        
@{
  var userControl = Html.Sitecore().Controls().GetUserControl(Model.Rendering);
  
  var messageId = WebUtil.GetQueryString("id");
  var contentLanguage = WebUtil.GetQueryString(Sitecore.Modules.EmailCampaign.Core.Constants.SpeakContentLanguage);
  var messageItem = Sitecore.Modules.EmailCampaign.Factory.GetMessage(messageId);
  if (messageItem != null)
  {
    var mailMessageItem = messageItem as MailMessageItem;
    var targetLanguage = mailMessageItem == null ? messageItem.InnerItem.Language : mailMessageItem.TargetLanguage;

    if (targetLanguage != null && targetLanguage.Name != contentLanguage)
    {
      contentLanguage = targetLanguage.Name;
    }
  }
  var languageRepository = new LanguageRepository();
  var messageLanguages = languageRepository.GetLanguages(messageId, contentLanguage);

  var currentLanguageToolTip = string.Empty;
  var currentLanguage = messageLanguages.SingleOrDefault(x => x.IsDefault);
  if (currentLanguage != null)
  {
    currentLanguageToolTip = currentLanguage.DisplayName;
    userControl.Attributes.Add("data-sc-defaultLanguage", currentLanguage.IsoCode);
    userControl.Attributes.Add("data-sc-defaultLanguageToolTip", currentLanguageToolTip);

    HttpCookie myCookie = new HttpCookie("messageLanguage", currentLanguage.IsoCode);
    myCookie.Expires = DateTime.Now.AddDays(1);
    Response.Cookies.Add(myCookie);
  }

  var allLanguages = new Sitecore.Modules.EmailCampaign.Util().GetDb().Languages;

  var formattedLanguages = allLanguages.Select(l =>
  {
    var messageLangauge = messageLanguages.FirstOrDefault(messageLang => messageLang.IsoCode == l.Name);

    if (messageLangauge != null)
    {
      return new
      {
        HasVersion = messageLangauge.HasVersion,
        IsDefault = messageLangauge.IsDefault,
        IsoCode = messageLangauge.IsoCode,
        DisplayName = messageLangauge.DisplayName
      };
    }

    return new
    {
      HasVersion = false,
      IsDefault = false,
      IsoCode = l.Name,
      DisplayName = l.CultureInfo.DisplayName
    };
  }).ToArray();

}
@if (messageLanguages.Count > 0 && currentLanguage != null)
{
  <div class="language-switcher-list">
    <ul>
      <li class="nav-header">@ClientHost.Globalization.Translate("Message languages")</li>

      <li class="sc-actionMenu-item language-all hidden">
        <a class="language-item" data-isocode="sc-report-language-all" href="#" tabindex="-1">@ClientHost.Globalization.Translate("All languages")</a>
      </li>

      @foreach (var language in formattedLanguages)
      {
        <li class="sc-actionMenu-item@(language.HasVersion ? " selected" : "")">
          <a class="language-item@(language.IsDefault ? " isdefault" : "")" data-isocode="@language.IsoCode" tabindex="-1" href="#">@language.DisplayName</a>
        </li>
      }
    </ul>
  </div>
  
}