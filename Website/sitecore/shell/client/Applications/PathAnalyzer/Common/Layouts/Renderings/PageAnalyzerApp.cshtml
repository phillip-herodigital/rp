@using Newtonsoft.Json
@using Sitecore
@using Sitecore.Mvc
@using Sitecore.PathAnalyzer.Localization
@using Sitecore.PathAnalyzer.Client.Sitecore.Shell.Client.Applications.PathAnalyzer.Common.Layouts.Renderings.Shared
@using Sitecore.Web.UI.Controls.Common.UserControls
@using Sitecore.PathAnalyzer.Client.Sitecore.Shell.Client.Applications.PathAnalyzer
@using UserControl = Sitecore.Web.UI.Controls.Common.UserControls.UserControl

@model Sitecore.Mvc.Presentation.RenderingModel
@{
    UserControl rendering = Html.Sitecore().Controls().GetUserControl(Model.Rendering);

    rendering.Class = "sc-PageAnalyzerApp";
    rendering.Requires.Script("pathanalyzer", "PageAnalyzerApp.js");
    rendering.Attributes.Add("data-bind", "visible: isVisible");

    //get the initial tree definition id from cookie, else from rendering parameters
    var initialItemId = Helper.GetTreeDefinitionCookieValue();
    if (string.IsNullOrWhiteSpace(initialItemId))
    {
        initialItemId = rendering.GetString("Default Tree Definition");
    }
    var initialItem = (!string.IsNullOrWhiteSpace(initialItemId) ? ClientHost.Databases.ContentDatabase.GetItem(initialItemId) : null);
    {
        if (initialItem != null)
        {
            rendering.Attributes.Add("data-sc-initialitem", initialItem.DisplayName + "," + initialItem.Database.Name + "," + initialItem.ID);
            rendering.Attributes.Add("data-sc-treeid", initialItem.ID.ToString());
        }
    }

    const string dateFormat = "yyyy-MM-dd";
    var dates = rendering.GetDateRangeParameters();
    var initialStartDate = dates.Item1.ToString(dateFormat);
    var initialEndDate = dates.Item2.ToString(dateFormat);

    rendering.Attributes.Add("data-sc-initialstartdate", initialStartDate);
    rendering.Attributes.Add("data-sc-initialenddate", initialEndDate);

    const string userProfileKey = "pageAnalyzer";
    var userProfileValue = ClientHost.Context.User.Profile.GetCustomProperty(userProfileKey);

    rendering.Attributes["data-sc-appstate"] = string.IsNullOrEmpty(userProfileValue) ? "[]" : userProfileValue;
    rendering.Attributes.Add("data-sc-userprofilekey", userProfileKey);
    
    rendering.HasNestedComponents = true;

    var errorMessages = new
    {
        InvalidTreeDefinition = Helper.GetTextValue(PathAnalyzerTexts.MapFilterInvalidMap)
    };

    rendering.Attributes.Add("data-sc-errormessages", JsonConvert.SerializeObject(errorMessages));
}

<div @rendering.HtmlAttributes>
    <svg id="viz" width="900" height="495">
        <defs id="mdef">
            <pattern id="icon" x="0" y="0" height="26" width="26">
              <image x="0" y="0" width="26" height="26" xlink:href="/Sitecore/Shell/client/Applications/PathAnalyzer/img/icon.png">
            </pattern>
            <pattern id="icon-dimmed" x="0" y="0" height="26" width="26">
              <image x="0" y="0" width="26" height="26" xlink:href="/Sitecore/Shell/client/Applications/PathAnalyzer/img/icon_dimmed.png">
            </pattern>
            <pattern id="back" x="0" y="0" height="36" width="36">
                <image x="0" y="0" width="36" height="36" xlink:href="/Sitecore/Shell/client/Applications/PathAnalyzer/img/back_button.png"></image>
            </pattern>
            <pattern id="back-hover" x="0" y="0" height="36" width="36">
                <image x="0" y="0" width="36" height="36" xlink:href="/Sitecore/Shell/client/Applications/PathAnalyzer/img/back_hover.png"></image>
            </pattern>
        </defs>
    </svg>
</div>